$schema: "https://json-schema.org/draft/07/schema"
$id: "https://teagantotally.rocks/deepthought/meta/meta-datatype"
title: Field schema validating meta-schema

definitions:
  fieldTypes:
    enum:
      - array
      - boolean
      - integer
      - number
      - string

  isNullableSchema:
    properties:
      nullable:
        type: boolean
        default: false
    required:
      - nullable
  stringCaseConstraintSchema:
    properties:
      casing:
        enum:
          - snakeCase
          - camelCase
          - titleCase
          - slug
          - lower
          - upper
    required:
      - casing
  stringFormatConstraintSchema:
    properties:
      format:
        enum:
          - GUID
          - IPv4
          - IPv6
          - MAC Address
          - Phone Number
          - JSON
          - YAML
    required:
      - format
  patternSchema:
    properties:
      pattern:
        type: string
        format: regex
    required:
      - pattern
  minLengthSchema:
    properties:
      minLength:
        type: integer
        minmum: 0
    required:
      - minLength
  maxLengthSchema:
    properties:
      maxLength:
        allOf:
          - type: integer
            minimum: 0
          - default: 0
    required:
      - maxLength
  stringConstraintSchema:
    oneOf:
      - $ref: "#/definitions/patternSchema"
      - $ref: "#/definitions/maxLengthSchema"
      - $ref: "#/definitions/minLengthSchema"
      - $ref: "#/definitions/stringCaseConstraintSchema"
      - $ref: "#/definitions/stringFormatConstraintSchema"
      - $ref: "#/definitions/isNullableSchema"

  valueExpressionSchema:
    oneOf:
      - anyOf:
        - type: number
        - type: integer
      - type: object
        properties:
          value:
            anyOf:
              - type: number
              - type: integer
          unit:
            type: string
            minLength: 1
            pattern: "^[a-z_]+$"
        required:
          - value
          - unit
  numericPrecisionConstraintSchema:
    properties:
      precision:
        $ref: "#/definitions/valueExpressionSchema"
    required:
      - precision
  maximumSchema:
    properties:
      maximum:
        $ref: "#/definitions/valueExpressionSchema"
    required:
      - maximum
  minimumSchema:
    properties:
      minimum:
        $ref: "#/definitions/valueExpressionSchema"
    required:
      - minimum
  exclusiveMaximumSchema:
    properties:
      exclusiveMaximum:
        $ref: "#/definitions/valueExpressionSchema"
    required:
      - exclusiveMaximum
  exclusiveMinimumSchema:
    properties:
      exclusiveMinimum:
        $ref: "#/definitions/valueExpressionSchema"
    required:
      - exclusiveMinimum
  numericConstraintSchema:
    oneOf:
      - $ref: "#/definitions/maximumSchema"
      - $ref: "#/definitions/minimumSchema"
      - $ref: "#/definitions/exclusiveMaximumSchema"
      - $ref: "#/definitions/exclusiveMinimumSchema"
      - $ref: "#/definitions/numericPrecisionConstraintSchema"
      - $ref: "#/definitions/isNullableSchema"

  arrayConstraintSchema:
    oneOf:
      - $ref: "#/definitions/maxLengthSchema"
      - $ref: "#/definitions/minLengthSchema"
      - $ref: "#/definitions/isNullableSchema"

  constraintsSchema:
    allOf:
      - if:
          properties:
            dataType:
              anyOf:
                - const: integer
                - const: number
        then:
          properties:
            constraints:
              oneOf:
                - $ref: "#/definitions/numericConstraintSchema"
                - type: array
                  items:
                    $ref: "#/definitions/numericConstraintSchema"
      - if:
          properties:
            dataType:
              const: string
        then:
          properties:
            constraints:
              oneOf:
                - $ref: "#/definitions/stringConstraintSchema"
                - type: array
                  items:
                    $ref: "#/definitions/stringConstraintSchema"
      - if:
          properties:
            dataType:
              const: array
        then:
          properties:
            constraints:
              oneOf:
                - $ref: "#/definitions/arrayConstraintSchema"
                - type: array
                  items:
                    $ref: "#/definitions/arrayConstraintSchema"
            items:
              oneOf:
                - $ref: "#/definitions/metaDataTypeSchema"
                  required:
                    - dataType
                - type: array
                  items:
                    $ref: "#/definitions/metaDataTypeSchema"
                    required:
                      - dataType
          required:
            - items

  metaDataTypeSchema:
    type: object
    properties:
      dataType:
        $ref: "#/definitions/fieldTypes"
      description:
        type: string
        minLength: 1
      unit:
        type: string
        minLength: 1
        pattern: "^[a-z_]+$"
    required:
      - dataType

    allOf:
      - $ref: "#/definitions/constraintsSchema"

type:
  - object
  - boolean

properties:
  id:
    type: string
    minLength: 1
    pattern: "^[a-z][a-z_]+[a-z]$"
  dataType:
    $ref: "#/definitions/fieldTypes"
  name:
    type: string
    minLength: 1
    pattern: "^[A-Z][a-zA-Z ]+$"
  description:
    type: string
    minLength: 1
  unit:
    type: string
    minLength: 1
    pattern: "^[a-z_]+$"
required:
  - id
  - name
  - description
  - dataType

allOf:
  - $ref: "#/definitions/constraintsSchema"